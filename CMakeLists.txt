cmake_minimum_required(VERSION 3.1...3.18)

if(${CMAKE_VERSION} VERSION_LESS 3.12)
    cmake_policy(VERSION ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION})
endif()

project(ProjectMinecraft VERSION 0.0.1 LANGUAGES CXX)
set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})

include(cmake/StandardProjectSettings.cmake)

# Link this 'library' to set the c++ standard / compile-time options requested
add_library(project_options INTERFACE)
target_compile_features(project_options INTERFACE cxx_std_20)
#set_target_properties(project_options PROPERTIES CXX_EXTENSIONS OFF)

if(CMAKE_CXX_COMPILER_ID MATCHES ".*Clang")
  option(ENABLE_BUILD_WITH_TIME_TRACE "Enable -ftime-trace to generate time tracing .json files on clang" OFF)
  if(ENABLE_BUILD_WITH_TIME_TRACE)
    add_compile_definitions(project_options INTERFACE -ftime-trace)
  endif()
endif()

if(MSVC)
	add_compile_definitions(project_options INTERFACE UNICODE _UNICODE)
endif()

# Link this 'library' to use the warnings specified in CompilerWarnings.cmake
add_library(project_warnings INTERFACE)

# enable cache system
include(cmake/Cache.cmake)

# standard compiler warnings
include(cmake/CompilerWarnings.cmake)
set_project_warnings(project_warnings)

# sanitizer options if supported by compiler
include(cmake/Sanitizers.cmake)
enable_sanitizers(project_options)

# enable doxygen
include(cmake/Doxygen.cmake)
enable_doxygen()

# allow for static analysis options
include(cmake/StaticAnalyzers.cmake)

option(BUILD_SHARED_LIBS "Enable compilation of shared libraries" OFF)
option(ENABLE_TESTING "Enable Test Builds" ON)
option(ENABLE_FUZZING "Enable Fuzzing Builds" OFF)

# Very basic PCH example
option(ENABLE_PCH "Enable Precompiled Headers" OFF)
if(ENABLE_PCH)
  # This sets a global PCH parameter, each project will build its own PCH, which is a good idea if any #define's change
  #
  # consider breaking this out per project as necessary
  target_precompile_headers(
    project_options
    INTERFACE
    <vector>
    <string>
    <map>
    <utility>)
endif()

# Set up some extra Conan dependencies based on our needs
# before loading Conan
set(CONAN_EXTRA_REQUIRES "")
set(CONAN_EXTRA_OPTIONS "")

if(CPP_STARTER_USE_IMGUI)
  set(CONAN_EXTRA_REQUIRES ${CONAN_EXTRA_REQUIRES} imgui-sfml/2.1@bincrafters/stable)

  # set(CONAN_EXTRA_OPTIONS ${CONAN_EXTRA_OPTIONS} sfml:shared=False sfml:graphics=True sfml:audio=False
  # sfml:window=True libalsa:disable_python=True)
endif()

if(CPP_STARTER_USE_SDL)
  set(CONAN_EXTRA_REQUIRES ${CONAN_EXTRA_REQUIRES} sdl2/2.0.10@bincrafters/stable)
  # set(CONAN_EXTRA_OPTIONS ${CONAN_EXTRA_OPTIONS} sdl2:wayland=True)
endif()

if(ENABLE_TESTING)
  enable_testing()
  message(
    "Building Tests. Be sure to check out test/constexpr_tests for constexpr testing"
  )
  add_subdirectory(test)
endif()

if(ENABLE_FUZZING)
  message(
    "Building Fuzz Tests, using fuzzing sanitizer https://www.llvm.org/docs/LibFuzzer.html"
  )
  add_subdirectory(fuzz_test)
endif()

find_package(Git QUIET)
if(GIT_FOUND AND EXISTS "${PROJECT_SOURCE_DIR}/.git")
# Update submodules as needed
	if(NOT TARGET fmt)
		execute_process(COMMAND ${GIT_EXECUTABLE} submodule init
                        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                        RESULT_VARIABLE GIT_SUBMOD_RESULT)
	endif()
    option(GIT_SUBMODULE "Check submodules during build" ON)
    if(GIT_SUBMODULE)
        message(STATUS "Submodule update")
        execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --remote
                        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                        RESULT_VARIABLE GIT_SUBMOD_RESULT)
        if(NOT GIT_SUBMOD_RESULT EQUAL "0")
            message(FATAL_ERROR "git submodule update --init failed with ${GIT_SUBMOD_RESULT}, please checkout submodules")
        endif()
    endif()
endif()

add_subdirectory(args)
add_subdirectory(nlohmann_json)
set(JSON_BuildTests OFF CACHE INTERNAL "")
add_subdirectory(lodepng)
add_subdirectory(fmt)
add_subdirectory(spdlog)
set(SPDLOG_FMT_EXTERNAL ON CACHE INTERNAL "")
add_subdirectory(crossguid)
add_subdirectory(compile-time-regular-expressions)
add_subdirectory(pcg-cpp)
add_subdirectory(gzstream)
add_subdirectory(concurrentqueue)
add_subdirectory(dynamic_bitset)
add_subdirectory(authlib)
add_subdirectory(cryptopp)
add_subdirectory(Minecraft/net/minecraft/nbt)
add_subdirectory(Minecraft/net/minecraft/util)
add_subdirectory(Minecraft/net/minecraft/block)
add_subdirectory(Minecraft/net/minecraft/world)
add_subdirectory(Minecraft/net/minecraft/village)
add_subdirectory(Minecraft/net/minecraft/tileentity)
add_subdirectory(Minecraft/net/minecraft/stats)
add_subdirectory(Minecraft/net/minecraft/scoreboard)
add_subdirectory(Minecraft/net/minecraft/profiler)
add_subdirectory(Minecraft/net/minecraft/potion)
add_subdirectory(Minecraft/net/minecraft/pathfinding)
add_subdirectory(Minecraft/net/minecraft/item)
add_subdirectory(Minecraft/net/minecraft/inventory)
add_subdirectory(Minecraft/net/minecraft/init)
add_subdirectory(Minecraft/net/minecraft/entity)
add_subdirectory(Minecraft/net/minecraft/enchantment)
add_subdirectory(Minecraft/net/minecraft/dispenser)
add_subdirectory(Minecraft/net/minecraft/creativetab)
add_subdirectory(Minecraft/net/minecraft/crash)
add_subdirectory(Minecraft/net/minecraft/command)

add_executable(Minecraft Minecraft/main.cpp)
target_link_libraries(Minecraft PRIVATE project_options project_warnings args nlohmann_json::nlohmann_json util block world fmt pcg-cpp authlib ctre)
